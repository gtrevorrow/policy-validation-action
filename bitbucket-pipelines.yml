image: node:16

definitions:
  steps:
    - step: &build
        name: Build
        clone:
          depth: full  # Ensure we have full repository access
        caches:
          - node
        script:
          - npm ci
          - npm run build
        artifacts:
          - dist/**

    - step: &test
        name: Test
        caches:
          - node
        script:
          - npm ci
          - npm run build
          # Run security audit
          - npm audit
          
          # Create test policies
          - |
            mkdir -p test/policies
            cat > test/policies/valid.tf << 'EOL'
            resource "oci_identity_policy" "test_policy" {
              statements = [
                "Allow group Administrators to manage all-resources in tenancy",
                "Allow group Developers to use instances in compartment dev",
                "Define tenancy Acceptor as ocid1.tenancy.oc1..aaaaaa",
                "Endorse group NetworkAdmins to manage virtual-network-family in tenancy foo",
                "Admit group ServiceAdmins of tenancy accountFoo to manage instances in tenancy",
                "Allow group SecurityAdmins to manage all-resources in tenancy where request.user.groups in ('SecurityAdmins','NetworkAdmins')"
              ]
            }
            EOL

            cat > test/policies/invalid.tf << 'EOL'
            resource "oci_identity_policy" "invalid_policy" {
              statements = [
                "Allow BadSyntax manage",
                "Allow groupDevelopers to use instances in compartment dev",
                "Admit group of tenancy 123 to manage instances in foo"
              ]
            }
            EOL

            cat > test/policies/variable_interpolation.tf << 'EOL'
            resource "oci_identity_policy" "test_policy_vars" {
              statements = [
                "Allow group ${var.admin_group} to manage all-resources in tenancy",
                "Define tenancy ${var.tenant_name} as ${var.tenant_ocid}",
                "Endorse group ${var.network_admins} to manage virtual-network-family in tenancy foo",
                "Admit group ${var.dev_group} of tenancy accountFoo to use instances in compartment ${var.env}",
                "Allow any-user to use instances in compartment ${var.public_compartment} where request.time BETWEEN ${var.start_time} AND ${var.end_time}"
              ]
            }
            EOL
          # Run tests with failure allowed
          - |
            for file in valid.tf invalid.tf variable_interpolation.tf; do
              echo "Testing $file..."
              OUTPUT=$(npx policy-validator --path test/policies/$file 2>&1 || true)
              echo "$OUTPUT"
              if [[ "$file" == "invalid.tf" && ! "$OUTPUT" =~ "Failed to parse policy statement:" ]]; then
                echo "Error: Invalid policy should have failed validation"
                exit 1
              fi
            done
          # Test with explicit extractor
          - |
            echo "Testing with default extractor..."
            npx policy-validator --path test/policies/valid.tf
            
            echo "Testing with custom pattern..."
            npx policy-validator --path test/policies/valid.tf --pattern "statements\\s*=\\s*\\[(.*?)\\]"

          # Test fixtures
          - |
            echo "Testing fixtures..."
            npx policy-validator --path src/__tests__/fixtures/ --pattern "statements\\s*=\\s*\\[(.*?)\\]"
        artifacts:
          reports:
            junit: test-results/test-results.xml
          when: always

pipelines:
  default:
    - step: *build
    - step: *test
  
  branches:
    main:
      - step: *build
      - step: *test
      - step:
          name: Publish
          deployment: production
          script:
            - npm ci
            - npm version ${BITBUCKET_TAG}
            - npm publish
          condition:
            changesets:
              includePaths:
                - "**"
              includeTags:
                - "^v[0-9]+.[0-9]+.[0-9]+$"

  pull-requests:
    '**':
      - step: *build
      - step: *test

custom:
  release:
    - step: *build
    - step: *test
    - step:
        name: Publish to NPM
        script:
          - pipe: atlassian/npm-publish:0.3.0
            variables:
              NPM_TOKEN: $NPM_TOKEN
caches:
  node: ~/.npm
