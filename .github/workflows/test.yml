name: Test Policy Validation Action
on: [push, pull_request]

jobs:
  test-action:
    runs-on: ubuntu-latest
    name: Test Policy Validation
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build action
        run: npm run build
        
      - name: Create test policies
        run: |
          mkdir -p test/policies
          # Valid policy file
          cat > test/policies/valid.tf << 'EOL'
          resource "oci_identity_policy" "valid_policy" {
            statements = [
              "Allow group Administrators to manage all-resources in tenancy",
              "Allow group Developers to use instances in compartment dev"
            ]
          }
          EOL
          
          # Invalid policy file
          cat > test/policies/invalid.tf << 'EOL'
          resource "oci_identity_policy" "invalid_policy" {
            statements = [
              "Invalid policy statement that should fail",
              "Allow BadSyntax manage"
            ]
          }
          EOL
          
          # Valid policy file with HCL variables
          cat > test/policies/valid_vars.tf << 'EOL'
          resource "oci_identity_policy" "valid_policy_vars" {
            statements = [
              "Allow group ${var.admin_group} to manage all-resources in tenancy",
              "Allow group Developers to use ${var.resource_type} in compartment ${var.dev_compartment}",
              "Allow any-user to use ${var.public_resource} in compartment ${var.public_compartment} where request.user.id = '${var.allowed_user}'"
            ]
          }
          EOL
          
          # Valid policy file with HCL variables in conditions
          cat > test/policies/valid_conditions.tf << 'EOL'
          resource "oci_identity_policy" "valid_policy_conditions" {
            statements = [
              "Allow group Developers to use instances in compartment dev where request.user.id = '${var.user_id}'",
              "Allow group Admins to manage volumes in compartment prod where request.networkSource.name = ${var.network_source}",
              "Allow any-user to use instances in compartment public where request.time BETWEEN ${var.start_time} AND ${var.end_time}"
            ]
          }
          EOL
          
          # Test file with all expression types
          cat > test/policies/all_expressions.tf << 'EOL'
          resource "oci_identity_policy" "all_expressions" {
            statements = [
              "efine tenancy Acceptor as ocid1.tenancy.oc1..aaaaaaaanneylhk3ibv2dmorxqgklcloydwnror5b3fs4ag7dlrbsiwkjdea",
              "endorse group Administrators to manage drg-attachment in tenancy VCN",
              "Admit group Administrators of tenancy Requestor to manage remote-peering-to in tenancy",
              "Allow group ${var.admin_group} to manage all-resources in tenancy"
            ]
          }
          EOL
          
          # Verify files were created
          ls -la test/policies/
          cat test/policies/valid.tf
          cat test/policies/invalid.tf
          
      - name: Test valid policy
        id: test-valid
        continue-on-error: true
        uses: ./
        with:
          path: './test/policies/valid.tf'
          
      - name: Test invalid policy
        id: test-invalid
        continue-on-error: true
        uses: ./
        with:
          path: './test/policies/invalid.tf'
          
      - name: Test policy with variables
        id: test-vars
        continue-on-error: true
        uses: ./
        with:
          path: './test/policies/valid_vars.tf'
          
      - name: Test conditions with variables
        id: test-conditions
        continue-on-error: true
        uses: ./
        with:
          path: './test/policies/valid_conditions.tf'
          
      - name: Test all expressions
        id: test-expressions
        continue-on-error: true
        uses: ./
        with:
          path: './test/policies/all_expressions.tf'
          
      - name: Verify test results
        shell: bash
        run: |
          # Helper function to check step outcome
          check_outcome() {
            local step=$1
            local expected=$2
            if [ "$step" != "$expected" ]; then
              echo "Expected outcome '$expected' but got '$step'"
              return 1
            fi
            return 0
          }

          # Run checks
          check_outcome "${{ steps.test-valid.outcome }}" "success" || {
            echo "Valid policy test failed unexpectedly"
            exit 1
          }

          check_outcome "${{ steps.test-invalid.outcome }}" "failure" || {
            echo "Invalid policy test succeeded unexpectedly"
            exit 1
          }

          check_outcome "${{ steps.test-vars.outcome }}" "success" || {
            echo "Variable interpolation test failed unexpectedly"
            exit 1
          }

          check_outcome "${{ steps.test-conditions.outcome }}" "success" || {
            echo "Conditions with variables test failed unexpectedly"
            exit 1
          }

          # Check valid policy output exists
          if [ -z "${{ steps.test-valid.outputs.allow_segments }}" ]; then
            echo "No segments found in valid policy"
            exit 1
          fi

          # Check for variable interpolation pattern using a safer grep approach
          echo "${{ steps.test-vars.outputs.allow_segments }}" | grep -q 'var\.admin_group' || {
            echo "Variable interpolation not properly preserved in output"
            exit 1
          }

          # Debug output
          echo "=== Test Results ==="
          echo "Valid policy output:"
          echo "${{ steps.test-valid.outputs.allow_segments }}"
          echo "Variable policy output:"
          echo "${{ steps.test-vars.outputs.allow_segments }}"
          echo "Conditions policy output:"
          echo "${{ steps.test-conditions.outputs.allow_segments }}"

          # Helper function to check expression type
          check_expression_type() {
            local output="$1"
            local type="$2"
            if ! echo "$output" | grep -q "^$type"; then
              echo "Missing $type expression in output"
              return 1
            fi
            return 0
          }

          # Check all expression types
          for type in "Define" "Endorse" "Admit" "Allow"; do
            check_expression_type "${{ steps.test-expressions.outputs.policy_expressions }}" "$type" || exit 1
          done

      - name: Test Allow Segments
        run: |
          # Use single quotes to preserve the ${var...} syntax
          ALLOW_SEGMENT='Allow group ${var.admin_group} to manage all-resources in tenancy'
          if [[ "${{ steps.test-vars.outputs.allow_segments }}" == *"$ALLOW_SEGMENT"* ]]; then
            echo "Found expected allow segment"
          else
            echo "Did not find expected allow segment"
            exit 1
          fi

      - name: Run tests
        run: npm test

      - name: Verify test results
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "Tests passed successfully"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi

      - name: Test action
        uses: ./
        env:
          POLICY_STATEMENTS_PATTERN: "statements\\s*=\\s*\\[\\s*((?:[^[\\]]*?(?:\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|\\$\\{(?:[^{}]|\\{[^{}]*\\})*\\})?)*)\\s*\\]"
        with:
          path: './test/fixtures'
