name: Test Policy Validation Action
on: [push, pull_request]

jobs:
  test-action:
    runs-on: ubuntu-latest
    name: Test Policy Validation
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build action
        run: npm run build
        
      - name: Create test policies
        run: |
          mkdir -p test/policies
          # Valid policy file
          cat > test/policies/valid.tf << 'EOL'
          resource "oci_identity_policy" "valid_policy" {
            statements = [
              "Allow group Administrators to manage all-resources in tenancy",
              "Allow group Developers to use instances in compartment dev"
            ]
          }
          EOL
          
          # Invalid policy file
          cat > test/policies/invalid.tf << 'EOL'
          resource "oci_identity_policy" "invalid_policy" {
            statements = [
              "Invalid policy statement that should fail",
              "Allow BadSyntax manage"
            ]
          }
          EOL
          
          # Valid policy file with HCL variables
          cat > test/policies/valid_vars.tf << 'EOL'
          resource "oci_identity_policy" "valid_policy_vars" {
            statements = [
              "Allow group ${var.admin_group} to manage all-resources in tenancy",
              "Allow group Developers to use ${var.resource_type} in compartment ${var.dev_compartment}",
              "Allow any-user to use ${var.public_resource} in compartment ${var.public_compartment} where request.user.id = '${var.allowed_user}'"
            ]
          }
          EOL
          
          # Valid policy file with HCL variables in conditions
          cat > test/policies/valid_conditions.tf << 'EOL'
          resource "oci_identity_policy" "valid_policy_conditions" {
            statements = [
              "Allow group Developers to use instances in compartment dev where request.user.id = '${var.user_id}'",
              "Allow group Admins to manage volumes in compartment prod where request.networkSource.name = ${var.network_source}",
              "Allow any-user to use instances in compartment public where request.time BETWEEN ${var.start_time} AND ${var.end_time}"
            ]
          }
          EOL
          
          # Test file with all expression types
          cat > test/policies/all_expressions.tf << 'EOL'
          resource "oci_identity_policy" "all_expressions" {
            statements = [
              "define tenancy Acceptor as ocid1.tenancy.oc1..aaaaaaaanneylhk3ibv2dmorxqgklcloydwnror5b3fs4ag7dlrbsiwkjdea",
              "endorse group Administrators to manage drg-attachment in tenancy VCN",
              "Admit group Administrators of tenancy Requestor to manage remote-peering-to in tenancy",
              "Allow group ${var.admin_group} to manage all-resources in tenancy"
            ]
          }
          EOL
          
          # Verify files were created
          ls -la test/policies/
          cat test/policies/valid.tf
          cat test/policies/invalid.tf
          
      - name: Test valid policy
        id: test-valid
        continue-on-error: true
        uses: ./
        with:
          path: './test/policies/valid.tf'
          
      - name: Test invalid policy
        id: test-invalid
        continue-on-error: true
        uses: ./
        with:
          path: './test/policies/invalid.tf'
          
      - name: Test policy with variables
        id: test-vars
        continue-on-error: true
        uses: ./
        with:
          path: './test/policies/valid_vars.tf'
          
      - name: Test conditions with variables
        id: test-conditions
        continue-on-error: true
        uses: ./
        with:
          path: './test/policies/valid_conditions.tf'
          
      - name: Test all expressions
        id: test-expressions
        continue-on-error: true
        uses: ./
        with:
          path: './test/policies/all_expressions.tf'
          
      - name: Test custom extractor pattern
        id: test-custom-pattern
        continue-on-error: true
        uses: ./
        with:
          path: './test/policies/valid.tf'
          extractor: 'regex'
          extractorPattern: 'statements\s*=\s*\[(.*?)\]'

      - name: Test custom extractor pattern using env variable
        id: test-custom-pattern-env-var
        continue-on-error: true
        env:
          POLICY_STATEMENTS_PATTERN: "statements\\s*=\\s*\\[\\s*((?:[^[\\]]*?(?:\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\.)*'|\\$\\{(?:[^{}]|\\{[^{}]*\\})*\\})?)*)\\s*\\]"
        uses: ./
        with:
          path: './test/policies/valid.tf'
          extractor: 'regex'


      - name: Test action with fixtures
        id: test-fixtures
        continue-on-error: true
        uses: ./
        with:
          path: './src/__tests__/fixtures'
          extractor: 'regex'
          extractorPattern: "statements\\s*=\\s*\\[\\s*((?:[^[\\]]*?(?:\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\.)*'|\\$\\{(?:[^{}]|\\{[^{}]*\\})*\\})?)*)\\s*\\]"

      - name: Verify test results
        shell: bash
        run: |
          verify_output() {
            local step_name="$1"
            local expect_failure="$2"
            
            echo "Verifying output from step: $step_name"
            
            # Get the raw output from the step
            local raw_output="${{ steps[format('{0}.outputs.policy_validation', step_name)] }}"
            echo "Raw output value:"
            echo "$raw_output"
            
            # Parse the output as JSON
            if ! echo "$raw_output" | jq . >/dev/null 2>&1; then
              echo "Invalid JSON in output"
              return 1
            fi
            
            # For invalid policy tests, verify isValid is false
            if [[ "$expect_failure" == "true" ]]; then
              if ! echo "$raw_output" | jq -e 'all(.[] | .isValid == false)' >/dev/null; then
                echo "Expected all policies to be invalid"
                return 1
              fi
            fi
            
            return 0
          }
          
          echo "Checking invalid policy output..."
          verify_output "test-invalid" "true"
          
          # Continue with other verifications
          check_outcome() {
            local step=$1
            local expected=$2
            if [ "$step" != "$expected" ]; then
              echo "Expected outcome '$expected' but got '$step'"
              return 1
            fi
            return 0
          }

          # Run checks
          check_outcome "${{ steps.test-valid.outcome }}" "success" || {
            echo "Valid policy test failed unexpectedly"
            exit 1
          }

          check_outcome "${{ steps.test-invalid.outcome }}" "failure" || {
            echo "Invalid policy test succeeded unexpectedly"
            exit 1
          }

          check_outcome "${{ steps.test-vars.outcome }}" "success" || {
            echo "Variable interpolation test failed unexpectedly"
            exit 1
          }

          check_outcome "${{ steps.test-conditions.outcome }}" "success" || {
            echo "Conditions with variables test failed unexpectedly"
            exit 1
          }

          check_outcome "${{ steps.test-expressions.outcome }}" "success" || {
            echo "All expressions test failed unexpectedly"
            exit 1
          }

          check_outcome "${{ steps.test-custom-pattern-env-var.outcome }}" "success" || {
            echo "All expressions test failed unexpectedly"
            exit 1
          }

          check_outcome "${{ steps.test-fixtures.outcome }}" "failure" || {
            echo "All expressions test failed unexpectedly"
            exit 1
          }

          echo "All tests passed successfully"

      - name: Run Jest tests
        run: npm test

      - name: Verify test results
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "Tests passed successfully"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi


