<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="170" failures="0" errors="0" time="2.766">
  <testsuite name="src/__tests__/ConfigurationParsing.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-07-04T17:51:23" time="1.757" tests="14">
    <testcase classname="Boolean Configuration Parsing › Configuration Scenarios" name="should work with actual Main.ts configuration options" time="0.002">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › Configuration Scenarios" name="should handle all boolean input patterns and edge cases" time="0.001">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › Configuration Scenarios" name="should handle null and undefined inputs correctly" time="0.002">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › Configuration Scenarios" name="should call platform.getInput with correct parameter name" time="0.004">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › Edge cases and error handling" name="should handle function signature compatibility" time="0.001">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › Edge cases and error handling" name="should handle special characters and unicode" time="0">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › File Names Parsing › parseFileNames function" name="should handle comma-separated files with spaces" time="0.001">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › File Names Parsing › parseFileNames function" name="should handle single file" time="0">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › File Names Parsing › parseFileNames function" name="should handle trailing commas" time="0">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › File Names Parsing › parseFileNames function" name="should handle consecutive commas" time="0">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › File Names Parsing › parseFileNames function" name="should handle only whitespace and commas" time="0">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › File Names Parsing › parseFileNames function" name="should handle empty string" time="0">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › File Names Parsing › parseFileNames function" name="should handle undefined input" time="0">
    </testcase>
    <testcase classname="Boolean Configuration Parsing › File Names Parsing › parseFileNames function" name="should handle files with spaces in names" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/ValidatorFactory.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-07-04T17:51:23" time="1.824" tests="13">
    <testcase classname="ValidatorFactory › Individual Validator Creation" name="should create an OciSyntaxValidator instance" time="0.002">
    </testcase>
    <testcase classname="ValidatorFactory › Individual Validator Creation" name="should create an OciCisBenchmarkValidator instance" time="0">
    </testcase>
    <testcase classname="ValidatorFactory › Validator Collections" name="should return local validators collection" time="0">
    </testcase>
    <testcase classname="ValidatorFactory › Validator Collections" name="should return global validators collection" time="0">
    </testcase>
    <testcase classname="ValidatorFactory › Pipeline Creation" name="should create a local validation pipeline" time="0.001">
    </testcase>
    <testcase classname="ValidatorFactory › Pipeline Creation" name="should create a global validation pipeline" time="0">
    </testcase>
    <testcase classname="ValidatorFactory › Pipeline Creation" name="should create pipelines with different configurations" time="0">
    </testcase>
    <testcase classname="ValidatorFactory › Pipeline Functionality Verification" name="should create functional local pipeline that validates syntax" time="0.011">
    </testcase>
    <testcase classname="ValidatorFactory › Pipeline Functionality Verification" name="should create functional global pipeline that validates CIS benchmark" time="0.002">
    </testcase>
    <testcase classname="ValidatorFactory › Pipeline Functionality Verification" name="should detect syntax errors through pipeline" time="0.002">
    </testcase>
    <testcase classname="ValidatorFactory › Factory Method Consistency" name="should create validators with consistent interfaces" time="0">
    </testcase>
    <testcase classname="ValidatorFactory › Factory Method Consistency" name="should create validators with unique metadata" time="0">
    </testcase>
    <testcase classname="ValidatorFactory › Factory Method Consistency" name="should handle edge cases in factory methods" time="0">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/ValidationPipeline.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-07-04T17:51:23" time="1.88" tests="28">
    <testcase classname="ValidationPipeline › Pipeline Construction" name="should create empty pipeline without logger" time="0.002">
    </testcase>
    <testcase classname="ValidationPipeline › Pipeline Construction" name="should create pipeline with logger" time="0.001">
    </testcase>
    <testcase classname="ValidationPipeline › Pipeline Construction" name="should allow chaining validator additions" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Validator Management" name="should add single validator" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Validator Management" name="should add multiple validators" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Validator Management" name="should handle duplicate validator names" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Pipeline Execution" name="should run validators in sequence" time="0.001">
    </testcase>
    <testcase classname="ValidationPipeline › Pipeline Execution" name="should return empty array when no validators are added" time="0.001">
    </testcase>
    <testcase classname="ValidationPipeline › Pipeline Execution" name="should return empty array when there are no statements" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Pipeline Execution" name="should handle empty statements array gracefully" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Error Handling" name="should handle validator failures gracefully" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Error Handling" name="should handle validator errors gracefully" time="0.001">
    </testcase>
    <testcase classname="ValidationPipeline › Error Handling" name="should handle multiple validator errors" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Error Handling" name="should continue pipeline execution after individual validator errors" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Performance and Concurrency" name="should handle validators with different execution times" time="0.102">
    </testcase>
    <testcase classname="ValidationPipeline › Performance and Concurrency" name="should handle large numbers of validators efficiently" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Logging and Reporting" name="should log pipeline execution start" time="0.001">
    </testcase>
    <testcase classname="ValidationPipeline › Logging and Reporting" name="should log individual validator execution" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Logging and Reporting" name="should log validator completion with results summary" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Logging and Reporting" name="should not log when no logger is provided" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › treatWarningsAsFailures Feature" name="should treat warnings as failures when enabled" time="0.001">
    </testcase>
    <testcase classname="ValidationPipeline › treatWarningsAsFailures Feature" name="should not treat warnings as failures when disabled" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › treatWarningsAsFailures Feature" name="should properly report completion when treatWarningsAsFailures is enabled" time="0.001">
    </testcase>
    <testcase classname="ValidationPipeline › treatWarningsAsFailures Feature" name="should properly report completion when treatWarningsAsFailures is disabled" time="0.001">
    </testcase>
    <testcase classname="ValidationPipeline › Validation Options Integration" name="should pass validation options to validators" time="0.001">
    </testcase>
    <testcase classname="ValidationPipeline › Validation Options Integration" name="should handle treatWarningsAsFailures option correctly" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Validation Options Integration" name="should handle multiple validators with different warning behaviors" time="0">
    </testcase>
    <testcase classname="ValidationPipeline › Validation Options Integration" name="should work without validation options (default behavior)" time="0">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/OciCisBenchmarkValidator.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-07-04T17:51:25" time="0.128" tests="17">
    <testcase classname="OciCisBenchmarkValidator › Validator Metadata" name="should return correct validator metadata" time="0.003">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › Validator Metadata" name="should provide detailed check descriptions" time="0.001">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › CIS-OCI-1.1: Service-Specific Administrators" name="should pass when service-specific admin policies are present" time="0.015">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › CIS-OCI-1.1: Service-Specific Administrators" name="should provide guidance when no service-specific policies found" time="0.001">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › CIS-OCI-1.2: Least Privilege Principle" name="should fail for overly permissive tenancy-level policies" time="0">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › CIS-OCI-1.2: Least Privilege Principle" name="should pass for compartment-scoped admin policies" time="0.001">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › CIS-OCI-1.2: Least Privilege Principle" name="should provide specific recommendations for violations" time="0">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › CIS-OCI-1.3: Administrators Group Protection" name="should fail when IAM policies lack administrator group protection" time="0.003">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › CIS-OCI-1.3: Administrators Group Protection" name="should pass when IAM policies include administrator protection" time="0.005">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › CIS-OCI-1.3: Administrators Group Protection" name="should provide specific protection recommendations" time="0.001">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › CIS-OCI-1.5: Compartment Administrator Restrictions" name="should pass when admin policies are compartment-scoped" time="0">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › CIS-OCI-1.5: Compartment Administrator Restrictions" name="should provide guidance for compartment-based access control" time="0.001">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › Edge Cases and Error Handling" name="should handle empty policy list gracefully" time="0">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › Edge Cases and Error Handling" name="should handle invalid policy syntax gracefully" time="0">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › Edge Cases and Error Handling" name="should handle mixed valid and invalid policies" time="0.001">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › Edge Cases and Error Handling" name="should provide consistent report structure across all checks" time="0.011">
    </testcase>
    <testcase classname="OciCisBenchmarkValidator › Edge Cases and Error Handling" name="should handle large policy sets efficiently" time="0.052">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/Infrastructure.unit.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-07-04T17:51:25" time="0.037" tests="11">
    <testcase classname="Infrastructure Unit Tests › findPolicyFiles" name="should handle a single file path" time="0.001">
    </testcase>
    <testcase classname="Infrastructure Unit Tests › findPolicyFiles" name="should filter files when fileNames are provided" time="0">
    </testcase>
    <testcase classname="Infrastructure Unit Tests › findPolicyFiles" name="should return all files by default (no filtering)" time="0">
    </testcase>
    <testcase classname="Infrastructure Unit Tests › findPolicyFiles" name="should filter files by extension when specified" time="0">
    </testcase>
    <testcase classname="Infrastructure Unit Tests › findPolicyFiles" name="should handle edge cases in file extension filtering" time="0.001">
    </testcase>
    <testcase classname="Infrastructure Unit Tests › validatePolicies" name="should return empty array when no files match criteria" time="0">
    </testcase>
    <testcase classname="Infrastructure Unit Tests › validatePolicies" name="should return empty array when directory has no files at all" time="0">
    </testcase>
    <testcase classname="Infrastructure Unit Tests › Error Handling Unit Tests" name="should handle empty directory" time="0">
    </testcase>
    <testcase classname="Infrastructure Unit Tests › Error Handling Unit Tests" name="should handle path access errors correctly in findPolicyFiles" time="0.001">
    </testcase>
    <testcase classname="Infrastructure Unit Tests › Configuration Parsing Unit Tests" name="should correctly parse boolean inputs with default values" time="0">
    </testcase>
    <testcase classname="Infrastructure Unit Tests › Configuration Parsing Unit Tests" name="should handle specific boolean values correctly" time="0">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/policy-validation.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-07-04T17:51:23" time="2.094" tests="12">
    <testcase classname="Policy Validation Integration › Extraction Integration" name="should extract all OCI policy statement types from Terraform" time="0.003">
    </testcase>
    <testcase classname="Policy Validation Integration › Extraction Integration" name="should handle Terraform variable interpolation in policies" time="0.001">
    </testcase>
    <testcase classname="Policy Validation Integration › Extraction Integration" name="should extract from multiple policy resources" time="0">
    </testcase>
    <testcase classname="Policy Validation Integration › Extraction Integration" name="should handle multi-line and indented statement arrays" time="0">
    </testcase>
    <testcase classname="Policy Validation Integration › Extraction Integration" name="should handle empty or malformed Terraform input" time="0.001">
    </testcase>
    <testcase classname="Policy Validation Integration › End-to-End Validation" name="should complete full validation pipeline with valid policies" time="0.012">
    </testcase>
    <testcase classname="Policy Validation Integration › End-to-End Validation" name="should detect and report validation failures" time="0.001">
    </testcase>
    <testcase classname="Policy Validation Integration › End-to-End Validation" name="should handle complex policy scenarios with variables and conditions" time="0.233">
    </testcase>
    <testcase classname="Policy Validation Integration › End-to-End Validation" name="should reject policies with syntax errors and provide detailed feedback" time="0.003">
    </testcase>
    <testcase classname="Policy Validation Integration › End-to-End Validation" name="should handle edge cases: empty policies, null inputs, large datasets" time="0.014">
    </testcase>
    <testcase classname="Policy Validation Integration › End-to-End Validation" name="should validate with both local and global pipelines" time="0.002">
    </testcase>
    <testcase classname="Policy Validation Integration › End-to-End Validation" name="should use the agentic validator for policies with variables in a hybrid pipeline" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/OciCisListener.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-07-04T17:51:25" time="0.207" tests="21">
    <testcase classname="OciCisListener › Service Administrator Policy Detection" name="should identify service admin policies for critical services" time="0.014">
    </testcase>
    <testcase classname="OciCisListener › Service Administrator Policy Detection" name="should not count non-manage policies as service admin policies" time="0">
    </testcase>
    <testcase classname="OciCisListener › Service Administrator Policy Detection" name="should handle custom service families for service admin policies" time="0.001">
    </testcase>
    <testcase classname="OciCisListener › Overly Permissive Policy Detection" name="should identify overly permissive policies" time="0.001">
    </testcase>
    <testcase classname="OciCisListener › Overly Permissive Policy Detection" name="should not flag compartment-scoped all-resources policies as overly permissive" time="0.001">
    </testcase>
    <testcase classname="OciCisListener › Overly Permissive Policy Detection" name="should handle various resource patterns" time="0.001">
    </testcase>
    <testcase classname="OciCisListener › Administrator Group Protection Detection" name="should identify admin restriction policies" time="0.004">
    </testcase>
    <testcase classname="OciCisListener › Administrator Group Protection Detection" name="should detect various administrator protection patterns" time="0.004">
    </testcase>
    <testcase classname="OciCisListener › MFA Policy Detection" name="should identify MFA policies" time="0">
    </testcase>
    <testcase classname="OciCisListener › MFA Policy Detection" name="should detect various MFA patterns" time="0.001">
    </testcase>
    <testcase classname="OciCisListener › Network Security Group Policy Detection" name="should identify network security group policies" time="0.007">
    </testcase>
    <testcase classname="OciCisListener › Network Security Group Policy Detection" name="should handle NSG policies in different scopes" time="0">
    </testcase>
    <testcase classname="OciCisListener › Compartment Administrator Policy Detection" name="should identify compartment-specific admin policies" time="0">
    </testcase>
    <testcase classname="OciCisListener › Compartment Administrator Policy Detection" name="should differentiate between compartment and tenancy scope" time="0.001">
    </testcase>
    <testcase classname="OciCisListener › Error Handling and Edge Cases" name="should handle empty statement list" time="0">
    </testcase>
    <testcase classname="OciCisListener › Error Handling and Edge Cases" name="should handle malformed policy statements gracefully" time="0.001">
    </testcase>
    <testcase classname="OciCisListener › Error Handling and Edge Cases" name="should handle policies with complex conditions" time="0.001">
    </testcase>
    <testcase classname="OciCisListener › Error Handling and Edge Cases" name="should handle duplicate policy statements" time="0">
    </testcase>
    <testcase classname="OciCisListener › Performance and Memory Management" name="should handle large numbers of statements efficiently" time="0.052">
    </testcase>
    <testcase classname="OciCisListener › Performance and Memory Management" name="should properly clean up resources after processing" time="0">
    </testcase>
    <testcase classname="OciCisListener › Compliance and Best Practices" name="should not identify any issues in a set of compliant policies" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/Integration.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-07-04T17:51:23" time="2.163" tests="18">
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › End-to-End File Processing" name="should process a complete Terraform file with multiple policy resources" time="0.012">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › End-to-End File Processing" name="should handle file processing errors gracefully" time="0.003">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › End-to-End File Processing" name="should extract policies using different pattern approaches" time="0.005">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › Complete Validation Pipeline" name="should execute complete validation workflow with multiple validators" time="0.023">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › Complete Validation Pipeline" name="should handle validation pipeline with no policies" time="0">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › Complete Validation Pipeline" name="should aggregate results from multiple validators correctly" time="0.004">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › Error Handling Integration" name="should handle and report file system errors" time="0.005">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › Error Handling Integration" name="should handle extraction errors gracefully" time="0.004">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › Error Handling Integration" name="should handle validator initialization correctly" time="0">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › ExtractorFactory Integration" name="should create regex extractor correctly" time="0.001">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › ExtractorFactory Integration" name="should throw error for unsupported extractor type" time="0.011">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › ExtractorFactory Integration" name="should create extractor with custom pattern" time="0">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › Performance Integration" name="should handle large files efficiently" time="0.009">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › Configuration Integration" name="should apply default configurations correctly" time="0.001">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › Configuration Integration" name="should handle missing configuration gracefully" time="0">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › Real-World Scenarios" name="should handle mixed policy statement formats" time="0.003">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › Real-World Scenarios" name="should validate complex Terraform file end-to-end" time="0.244">
    </testcase>
    <testcase classname="Integration Tests - Complete Policy Validation Workflow › Real-World Scenarios" name="should execute validatePolicies function end-to-end" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/Infrastructure.integration.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-07-04T17:51:23" time="2.186" tests="9">
    <testcase classname="Infrastructure Integration Tests › Policy Processing - Integration Tests" name="should extract policies from valid fixture file with default regex pattern" time="0.009">
    </testcase>
    <testcase classname="Infrastructure Integration Tests › Policy Processing - Integration Tests" name="should extract policies from valid fixture file with custom regex pattern" time="0.005">
    </testcase>
    <testcase classname="Infrastructure Integration Tests › Policy Processing - Integration Tests" name="should extract policies from invalid fixture file" time="0.001">
    </testcase>
    <testcase classname="Infrastructure Integration Tests › Policy Processing - Integration Tests" name="should extract policies using different regex patterns" time="0.063">
    </testcase>
    <testcase classname="Infrastructure Integration Tests › Policy Processing - Integration Tests" name="should extract policies from Core landing zone input.auto.tvars.template file example" time="0.005">
    </testcase>
    <testcase classname="Infrastructure Integration Tests › Policy Processing - Integration Tests" name="should extract and validate complex security policies from OCI Core Landing Zone IAM module" time="0.071">
    </testcase>
    <testcase classname="Infrastructure Integration Tests › Policy Validation - Integration Tests" name="should accept valid policies from fixture file" time="0.004">
    </testcase>
    <testcase classname="Infrastructure Integration Tests › Policy Validation - Integration Tests" name="should reject invalid policies from fixture file" time="0.002">
    </testcase>
    <testcase classname="Infrastructure Integration Tests › End-to-End Workflows - Integration Tests" name="should process fixture directory with real file operations" time="0.194">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/OciSyntaxValidator.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-07-04T17:51:25" time="0.377" tests="14">
    <testcase classname="OciSyntaxValidator › Validator Metadata" name="should return correct validator metadata" time="0.001">
    </testcase>
    <testcase classname="OciSyntaxValidator › Valid Policy Syntax" name="should validate well-formed policy statements without errors" time="0.028">
    </testcase>
    <testcase classname="OciSyntaxValidator › Valid Policy Syntax" name="should handle policy statements with Terraform variables" time="0.002">
    </testcase>
    <testcase classname="OciSyntaxValidator › Valid Policy Syntax" name="should handle complex conditions and clauses" time="0.008">
    </testcase>
    <testcase classname="OciSyntaxValidator › Invalid Policy Syntax" name="should detect invalid policy statements with specific error messages" time="0.005">
    </testcase>
    <testcase classname="OciSyntaxValidator › Invalid Policy Syntax" name="should provide detailed error messages with position information" time="0.002">
    </testcase>
    <testcase classname="OciSyntaxValidator › Invalid Policy Syntax" name="should handle malformed variable interpolation" time="0.262">
    </testcase>
    <testcase classname="OciSyntaxValidator › Invalid Policy Syntax" name="should detect missing required keywords and components" time="0.001">
    </testcase>
    <testcase classname="OciSyntaxValidator › Edge Cases" name="should handle empty statement list" time="0">
    </testcase>
    <testcase classname="OciSyntaxValidator › Edge Cases" name="should handle empty or whitespace-only statements" time="0">
    </testcase>
    <testcase classname="OciSyntaxValidator › Edge Cases" name="should handle mix of valid and invalid statements" time="0.002">
    </testcase>
    <testcase classname="OciSyntaxValidator › Edge Cases" name="should handle null and undefined inputs gracefully" time="0.001">
    </testcase>
    <testcase classname="OciSyntaxValidator › Edge Cases" name="should handle very long policy statements" time="0.03">
    </testcase>
    <testcase classname="OciSyntaxValidator › Edge Cases" name="should handle unicode and special characters" time="0">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/cli.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-07-04T17:51:23" time="2.26" tests="5">
    <testcase classname="CLI Tests" name="invalid.tf policy validation outputs JSON with isValid=false" time="0.133">
    </testcase>
    <testcase classname="CLI Tests" name="error conditions output JSON with error field" time="0.08">
    </testcase>
    <testcase classname="CLI Tests" name="using files option works correctly" time="0.134">
    </testcase>
    <testcase classname="CLI Tests" name="file-extension command-line flag should work correctly" time="0.19">
    </testcase>
    <testcase classname="CLI Tests" name="should return empty results when no files match criteria" time="0.087">
    </testcase>
  </testsuite>
  <testsuite name="src/__tests__/PolicyValidator.integration.test.ts" errors="0" failures="0" skipped="0" timestamp="2025-07-04T17:51:25" time="0.399" tests="8">
    <testcase classname="Policy Validator Integration › Multi-Validator Pipeline Integration" name="should run syntax and CIS validation in complete pipeline" time="0.012">
    </testcase>
    <testcase classname="Policy Validator Integration › Multi-Validator Pipeline Integration" name="should handle mixed valid and invalid policies across validators" time="0.002">
    </testcase>
    <testcase classname="Policy Validator Integration › Multi-Validator Pipeline Integration" name="should maintain validator independence in pipeline" time="0">
    </testcase>
    <testcase classname="Policy Validator Integration › Real-World Terraform Integration" name="should extract and validate complex multi-resource Terraform" time="0">
    </testcase>
    <testcase classname="Policy Validator Integration › Real-World Terraform Integration" name="should handle Terraform with variable interpolation correctly" time="0">
    </testcase>
    <testcase classname="Policy Validator Integration › Real-World Terraform Integration" name="should process large Terraform configurations efficiently" time="0.003">
    </testcase>
    <testcase classname="Policy Validator Integration › Error Resilience and Recovery" name="should continue validation when some policies fail to parse" time="0.003">
    </testcase>
    <testcase classname="Policy Validator Integration › Error Resilience and Recovery" name="should provide comprehensive validation summary" time="0.002">
    </testcase>
  </testsuite>
</testsuites>