image: node:latest

variables:
  GIT_DEPTH: 0  # Fetch all history for proper access

stages:
  - build
  - test

build:
  stage: build
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - dist/

test:
  stage: test
  allow_failure: true  # Allow test failures without failing the pipeline
  script:
    - npm ci
    - npm run build
    
    # Run Jest tests first
    - npm test
    # Create test policies
    - |
      mkdir -p test/policies
      cat > test/policies/valid.tf << 'EOL'
      resource "oci_identity_policy" "test_policy" {
        statements = [
          "Allow group Administrators to manage all-resources in tenancy",
          "Allow group Developers to use instances in compartment dev",
          "Define tenancy Acceptor as ocid1.tenancy.oc1..aaaaaa",
          "Endorse group NetworkAdmins to manage virtual-network-family in tenancy foo",
          "Admit group ServiceAdmins of tenancy accountFoo to manage instances in tenancy",
          "Allow group SecurityAdmins to manage all-resources in tenancy where request.user.groups in ('SecurityAdmins','NetworkAdmins')"
        ]
      }
      EOL

      cat > test/policies/invalid.tf << 'EOL'
      resource "oci_identity_policy" "invalid_policy" {
        statements = [
          "Allow BadSyntax manage",
          "Allow groupDevelopers to use instances in compartment dev",
          "Admit group {ServiceAdmins} of tenancy 123 to manage instances in tenancy"
        ]
      }
      EOL

      cat > test/policies/variable_interpolation.tf << 'EOL'
      resource "oci_identity_policy" "test_policy_vars" {
        statements = [
          "Allow group ${var.admin_group} to manage all-resources in tenancy",
          "Define tenancy ${var.tenant_name} as ${var.tenant_ocid}",
          "Endorse group ${var.network_admins} to manage virtual-network-family in tenancy foo",
          "Admit group ${var.dev_group} of tenancy accountFoo to use instances in compartment ${var.env}",
          "Allow any-user to use instances in compartment ${var.public_compartment} where request.time BETWEEN ${var.start_time} AND ${var.end_time}"
        ]
      }
      EOL
    # Run tests with failure allowed
    - |
      for file in valid.tf invalid.tf variable_interpolation.tf; do
        echo "Testing $file..."
        OUTPUT=$(node dist/index.js --path test/policies/$file 2>&1 || true)
        echo "$OUTPUT"
        if [[ "$file" == "invalid.tf" && ! "$OUTPUT" =~ "Failed to parse policy statement:" ]]; then
          echo "Error: Invalid policy should have failed validation"
          exit 1
        fi
      done
    # Test fixtures
    - |
      echo "Testing pileline with fixtures and custom pattern and explicite extractor ..."
      node dist/index.js --path src/__tests__/fixtures/ --pattern "statements\\s*=\\s*\\[(.*?)\\]" --extractor regex 
    
  artifacts:
    reports:
      junit: test-results/test-results.xml
    paths:
      - test-results/
    when: always  # Always upload test results, even on failure
