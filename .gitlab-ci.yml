image: node:16

variables:
  GIT_DEPTH: 0  # Fetch all history for proper access

stages:
  - build
  - test
  - release

build:
  stage: build
  script:
    - npm ci
    - npm run build
  artifacts:
    paths:
      - dist/

test:
  stage: test
  script:
    - npm ci
    - npm run build
    # Create test policies
    - |
      mkdir -p test/policies
      cat > test/policies/valid.tf << 'EOL'
      resource "oci_identity_policy" "valid_policy" {
        statements = [
          "Allow group Administrators to manage all-resources in tenancy",
          "Allow group Developers to use instances in compartment dev"
        ]
      }
      EOL
    # Run validation
    - node dist/cli.js --path test/policies/valid.tf  # Fix entry point name
  artifacts:
    reports:
      junit: test-results.xml

release:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - npm ci
    - npm run build
    # Package for GitLab registry
    - |
      echo "registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/" >> .npmrc
      echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> .npmrc
    - npm publish

validate_policies:
  image: node:16
  script:
    - npm ci
    - npm run build
    # Create test files similar to GitHub Actions workflow
    - mkdir -p test/policies
    - |
      cat > test/policies/all_expressions.tf << 'EOL'
      resource "oci_identity_policy" "all_expressions" {
        statements = [
          "Define group Administrators as admins",
          "Endorse group Developers to use instances in tenancy",
          "Admit group ServiceAdmins of tenancy-abc to manage instances in compartment prod",
          "Allow group admins to manage all-resources in tenancy"
        ]
      }
      EOL
    - npx policy-validation-action --path test/policies
