image: node:latest

variables:
  GIT_DEPTH: 0  # Fetch all history for proper access

stages:
  - test

test:
  stage: test
  allow_failure: true  # Allow test failures without failing the pipeline
  script:
    - apt-get update && apt-get install -y jq
    - npm install -g gtrevorrow/policy-validation-action#development
    
    # Create test policies
    - |
      mkdir -p test/policies
      cat > test/policies/valid.tf << 'EOL'
      resource "oci_identity_policy" "test_policy" {
        statements = [
          "Allow group Administrators to manage all-resources in tenancy",
          "Allow group Developers to use instances in compartment dev",
          "Define tenancy Acceptor as ocid1.tenancy.oc1..aaaaaa",
          "Endorse group NetworkAdmins to manage virtual-network-family in tenancy foo",
          "Admit group ServiceAdmins of tenancy accountFoo to manage instances in tenancy",
          "Allow group SecurityAdmins to manage all-resources in tenancy where request.user.groups in ('SecurityAdmins','NetworkAdmins')"
        ]
      }
      EOL

      cat > test/policies/invalid.tf << 'EOL'
      resource "oci_identity_policy" "invalid_policy" {
        statements = [
          "Allow BadSyntax manage",
          "Allow groupDevelopers to use instances in compartment dev",
          "Admit group {ServiceAdmins} of tenancy 123 to manage instances in tenancy"
        ]
      }
      EOL

      cat > test/policies/variable_interpolation.tf << 'EOL'
      resource "oci_identity_policy" "test_policy_vars" {
        statements = [
          "Allow group ${var.admin_group} to manage all-resources in tenancy",
          "Define tenancy ${var.tenant_name} as ${var.tenant_ocid}",
          "Endorse group ${var.network_admins} to manage virtual-network-family in tenancy foo",
          "Admit group ${var.dev_group} of tenancy accountFoo to use instances in compartment ${var.env}",
          "Allow any-user to use instances in compartment ${var.public_compartment} where request.time BETWEEN ${var.start_time} AND ${var.end_time}"
        ]
      }
      EOL
    # Run tests with failure allowed
    - |
      verify_json() {
        local output="$1"
        echo "$output" | grep -E '^\{.*\}$|^\[.*\]$' | tail -n1 | jq -e '
          if type=="array" then
            all(.[]; (type=="object" and (.isValid | type=="boolean") and (.errors | type=="array")))
          elif type=="object" then
            (.error != null or (.isValid != null))
          else
            false
          end
        ' >/dev/null
      }
      
      for file in valid.tf invalid.tf variable_interpolation.tf; do
        echo "Testing $file..."
        if OUTPUT=$(policy-validation-action --path test/policies/$file 2>&1); then
          if ! verify_json "$OUTPUT"; then
            echo "Invalid JSON output for $file"
            echo "$OUTPUT"
            exit 1
          fi
          if [[ "$file" == "invalid.tf" ]]; then
            echo "Invalid policy should have failed validation"
            exit 1
          fi
        else
          if ! verify_json "$OUTPUT"; then
            echo "Invalid JSON output for failed case $file"
            echo "$OUTPUT"
            exit 1
          fi
        fi
      done
